require("globals.global")
require("globals.text")
-- main:/go#guigame
HASH_TOUCH = hash("touch")
local time = 0
local second = 0

local function change_color(node)
	ALL_TOUCH = ALL_TOUCH + 1
	msg.post("#click4", "play_sound")
	gui.animate(node, "color", GREY_COLOR, gui.EASING_OUTBACK, 0.3, 0, 
	function()
		gui.set_color(node, WHITE_COLOR)
	end)
end

function init(self)
	msg.post("@render:", "use_fixed_fit_projection", { near = -1, far = 1 })
	msg.post(".", "acquire_input_focus")
	msg.post("#bg", "play_sound")
	msg.post("#down", "play_sound")
	sound.set_group_gain("down", 0)
	sound.set_group_gain("bg", 0.5)
	self.word_down = false
	PARTICLE = gui.get_node("particle_snow")
	gui.play_particlefx(PARTICLE)
	SCORE_NODE = gui.get_node("score")
	MENU_NODE = gui.get_node("menu")
	TIME_NODE = gui.get_node("time")
	BOOST_NODE = gui.get_node("boost_node")
	BOOST_TEXT = gui.get_node("boost_text")
	BOOST_PIE = gui.get_node("boost_pie")
	PROGRESS_BAR1 = gui.get_node("progress_bar1")
	gui.set_text(SCORE_NODE, LANG_TEXT["score"] .. SCORE)
	gui.set_text(MENU_NODE, LANG_TEXT["menu"])
	Q_NODE = gui.get_node("Q")
	W_NODE = gui.get_node("W")
	E_NODE = gui.get_node("E")
	R_NODE = gui.get_node("R")
	T_NODE = gui.get_node("T")
	Y_NODE = gui.get_node("Y")
	U_NODE = gui.get_node("U")
	I_NODE = gui.get_node("I")
	O_NODE = gui.get_node("O")
	P_NODE = gui.get_node("P")
	A_NODE = gui.get_node("A")
	S_NODE = gui.get_node("S")
	D_NODE = gui.get_node("D")
	F_NODE = gui.get_node("F")
	G_NODE = gui.get_node("G")
	H_NODE = gui.get_node("H")
	J_NODE = gui.get_node("J")
	K_NODE = gui.get_node("K")
	L_NODE = gui.get_node("L")
	Z_NODE = gui.get_node("Z")
	X_NODE = gui.get_node("X")
	C_NODE = gui.get_node("C")
	V_NODE = gui.get_node("V")
	B_NODE = gui.get_node("B")
	N_NODE = gui.get_node("N")
	M_NODE = gui.get_node("M")
	LIFE_NODE = gui.get_node("life")
	LIFE1_NODE = gui.get_node("life1")
	LIFE2_NODE = gui.get_node("life2")
	LEVEL_TEXT = gui.get_node("level_text")
	PROGRESS_BAR = gui.get_node("progress_bar")
	if FREE_BOOST then
		gui.set_text(BOOST_TEXT, LANG_TEXT["boost_free"])
		gui.set_enabled(BOOST_NODE, true)
	else
		gui.set_text(BOOST_TEXT, LANG_TEXT["boost"])
		gui.set_enabled(BOOST_NODE, false)
	end
	gui.set_text(BOOST_TEXT, LANG_TEXT["boost_free"])
	gui.set_enabled(LEVEL_TEXT, false)
	gui.set_enabled(PROGRESS_BAR1, false)
	gui.set_size(PROGRESS_BAR, vmath.vector3(0,15,0))
end

function update(self, dt)
	time = time + dt
	local minuta = time / 60
	second = second + dt
	if second > 60 then
		second = 0
	end
	local format = string.format("%01d:%02d", minuta ,second)
	if minuta < 1 then
		format = string.format("%01d",second)
	end
	gui.set_text(TIME_NODE, format)
	PLAY_TIME = format
end

local count_word = 0
local delete_word = 0
function on_message(self, message_id, message, sender)
	if message_id == hash("score") then
		if SCORE == 500 or SCORE == 1000 or SCORE == 1500 or SCORE == 2000 or SCORE == 2500 then
			set_life(-1)
			sound.play("#add_hp")
		end
		gui.set_text(SCORE_NODE, LANG_TEXT["score"] .. SCORE)
	elseif message_id == hash("boost") then
		gui.set_enabled(BOOST_NODE, true)
		gui.set_scale(BOOST_PIE,  vmath.vector3(1,1,1))
		gui.animate(BOOST_PIE, "scale", vmath.vector3(0,0,1), gui.EASING_LINEAR, 8, 0, 
		function()
			print('end')
			gui.set_enabled(BOOST_NODE, false)
			gui.set_enabled(PROGRESS_BAR1, false)
		end)
	elseif message_id == hash("boost_time") then		
		local x_max = 720
		local prosent = message.value * 100 / 20
		local x_value = x_max * prosent / 100
		gui.set_size(PROGRESS_BAR1, vmath.vector3(x_value,15,0))		
	elseif message_id == hash("minus_life") then
		sound.play("#minus_hp")
	elseif message_id == hash("dead") then
		sound.play("#dead_sound")
	elseif message_id == hash("win_level") then
		sound.play("#win_game")
	elseif message_id == hash("set_progress_bar") then
		local x_max = 720
		local prosent = 100 - message.value * 100 /  LEVEL_TIME_GAME[LEVEL]
		local x_value = x_max * prosent / 100
		gui.set_size(PROGRESS_BAR, vmath.vector3(x_value,15,0))
	elseif message_id == hash("set_text_level") then
		gui.set_enabled(LEVEL_TEXT, true)
		gui.set_text(LEVEL_TEXT, LEVEL .. LANG_TEXT["level_text"])
		gui.animate(LEVEL_TEXT, "color", vmath.vector4(1,1,1,0), gui.EASING_LINEAR, 0.6, 0, function()gui.set_enabled(LEVEL_TEXT, false)end)
	elseif message_id == hash("set_color") then
		math.randomseed(os.time())
		local r = math.random(100, 999) / 1000
		local g = math.random(100, 999) / 1000
		local b = math.random(100, 999) / 1000
		gui.set_color(PARTICLE, vmath.vector3(r,g,b,255))
	elseif message_id == hash("set_life") then
		if message.value == 1 then
			gui.play_flipbook(LIFE_NODE, "hearts")
			gui.play_flipbook(LIFE1_NODE, "hearts_empty")
			gui.play_flipbook(LIFE2_NODE, "hearts_empty")
		elseif message.value == 2 then
			gui.play_flipbook(LIFE_NODE, "hearts")
			gui.play_flipbook(LIFE1_NODE, "hearts")
			gui.play_flipbook(LIFE2_NODE, "hearts_empty")
		elseif message.value == 3 then
			gui.play_flipbook(LIFE_NODE, "hearts")
			gui.play_flipbook(LIFE1_NODE, "hearts")
			gui.play_flipbook(LIFE2_NODE, "hearts")
		elseif message.value == 0 then
			gui.play_flipbook(LIFE_NODE, "hearts_empty")
			gui.play_flipbook(LIFE1_NODE, "hearts_empty")
			gui.play_flipbook(LIFE2_NODE, "hearts_empty")
		else
			gui.play_flipbook(LIFE_NODE, "hearts")
			gui.play_flipbook(LIFE1_NODE, "hearts")
			gui.play_flipbook(LIFE2_NODE, "hearts")
		end
	elseif message_id == hash("rewarded") then
		gui.set_enabled(BOOST_NODE, false)
		gui.set_enabled(PROGRESS_BAR1, true)
		BOOST = true
	elseif message_id == hash("down") then
		self.word_down = message.value
		if self.word_down then
			count_word = count_word + 1
			sound.set_group_gain("bg", 0)
			sound.set_group_gain("down", 0.5)
		else
			delete_word = delete_word + 1
			if count_word == delete_word then
				sound.set_group_gain("bg", 0.5)
				sound.set_group_gain("down", 0)
				delete_word = 0
				count_word = 0
			end
		end
	end
end

function on_input(self, action_id, action)
	if action_id == HASH_TOUCH and action.pressed and gui.pick_node(MENU_NODE, action.x, action.y) or action_id == hash("tab") and action.pressed then
		msg.post("menu:/go#menu", "game_state")
		msg.post("menu:/go#menu", "change_text")
	elseif action_id == HASH_TOUCH and action.pressed and gui.pick_node(BOOST_NODE, action.x, action.y) then
		if FREE_BOOST then
			msg.post("main:/go#guigame", "rewarded")
			FREE_BOOST = false
			gui.set_text(BOOST_TEXT, LANG_TEXT["boost"])
		else
			msg.post("menu:/go#yandex", "show_rewarded_video")
		end
		-- msg.post("main:/go#guigame", "rewarded")
	elseif action_id == HASH_TOUCH and action.pressed and gui.pick_node(Q_NODE, action.x, action.y) or action_id == hash("Q") and action.pressed then
		TOUCH_WORD = "Q"
		change_color(Q_NODE)
	elseif action_id == HASH_TOUCH and action.pressed and gui.pick_node(W_NODE, action.x, action.y) or action_id == hash("W") and action.pressed then
		TOUCH_WORD = "W"
		change_color(W_NODE)
	elseif action_id == HASH_TOUCH and action.pressed and gui.pick_node(E_NODE, action.x, action.y) or action_id == hash("E") and action.pressed then
		TOUCH_WORD = "E"
		change_color(E_NODE)
	elseif action_id == HASH_TOUCH and action.pressed and gui.pick_node(R_NODE, action.x, action.y) or action_id == hash("R") and action.pressed then
		TOUCH_WORD = "R"
		change_color(R_NODE)
	elseif action_id == HASH_TOUCH and action.pressed and gui.pick_node(T_NODE, action.x, action.y) or action_id == hash("T") and action.pressed then
		TOUCH_WORD = "T"
		change_color(T_NODE)
	elseif action_id == HASH_TOUCH and action.pressed and gui.pick_node(Y_NODE, action.x, action.y) or action_id == hash("Y") and action.pressed then
		TOUCH_WORD = "Y"
		change_color(Y_NODE)
	elseif action_id == HASH_TOUCH and action.pressed and gui.pick_node(U_NODE, action.x, action.y) or action_id == hash("U") and action.pressed then
		TOUCH_WORD = "U"
		change_color(U_NODE)
	elseif action_id == HASH_TOUCH and action.pressed and gui.pick_node(I_NODE, action.x, action.y) or action_id == hash("I") and action.pressed then
		TOUCH_WORD = "I"
		change_color(I_NODE)
	elseif action_id == HASH_TOUCH and action.pressed and gui.pick_node(O_NODE, action.x, action.y) or action_id == hash("O") and action.pressed then
		TOUCH_WORD = "O"
		change_color(O_NODE)
	elseif action_id == HASH_TOUCH and action.pressed and gui.pick_node(P_NODE, action.x, action.y) or action_id == hash("P") and action.pressed then
		TOUCH_WORD = "P"
		change_color(P_NODE)
	elseif action_id == HASH_TOUCH and action.pressed and gui.pick_node(A_NODE, action.x, action.y) or action_id == hash("A") and action.pressed then
		TOUCH_WORD = "A"
		change_color(A_NODE)
	elseif action_id == HASH_TOUCH and action.pressed and gui.pick_node(S_NODE, action.x, action.y) or action_id == hash("S") and action.pressed then
		TOUCH_WORD = "S"
		change_color(S_NODE)
	elseif action_id == HASH_TOUCH and action.pressed and gui.pick_node(D_NODE, action.x, action.y) or action_id == hash("D") and action.pressed then
		TOUCH_WORD = "D"
		change_color(D_NODE)
	elseif action_id == HASH_TOUCH and action.pressed and gui.pick_node(F_NODE, action.x, action.y) or action_id == hash("F") and action.pressed then
		TOUCH_WORD = "F"
		change_color(F_NODE)
	elseif action_id == HASH_TOUCH and action.pressed and gui.pick_node(G_NODE, action.x, action.y) or action_id == hash("G") and action.pressed then
		TOUCH_WORD = "G"
		change_color(G_NODE)
	elseif action_id == HASH_TOUCH and action.pressed and gui.pick_node(H_NODE, action.x, action.y) or action_id == hash("H") and action.pressed then
		TOUCH_WORD = "H"
		change_color(H_NODE)
	elseif action_id == HASH_TOUCH and action.pressed and gui.pick_node(J_NODE, action.x, action.y) or action_id == hash("J") and action.pressed then
		TOUCH_WORD = "J"
		change_color(J_NODE)
	elseif action_id == HASH_TOUCH and action.pressed and gui.pick_node(K_NODE, action.x, action.y) or action_id == hash("K") and action.pressed then
		TOUCH_WORD = "K"
		change_color(K_NODE)
	elseif action_id == HASH_TOUCH and action.pressed and gui.pick_node(L_NODE, action.x, action.y) or action_id == hash("L") and action.pressed then
		TOUCH_WORD = "L"
		change_color(L_NODE)
	elseif action_id == HASH_TOUCH and action.pressed and gui.pick_node(Z_NODE, action.x, action.y) or action_id == hash("Z") and action.pressed then
		TOUCH_WORD = "Z"
		change_color(Z_NODE)
	elseif action_id == HASH_TOUCH and action.pressed and gui.pick_node(X_NODE, action.x, action.y) or action_id == hash("X") and action.pressed then
		TOUCH_WORD = "X"
		change_color(X_NODE)
	elseif action_id == HASH_TOUCH and action.pressed and gui.pick_node(C_NODE, action.x, action.y) or action_id == hash("C") and action.pressed then
		TOUCH_WORD = "C"
		change_color(C_NODE)
	elseif action_id == HASH_TOUCH and action.pressed and gui.pick_node(V_NODE, action.x, action.y) or action_id == hash("V") and action.pressed then
		TOUCH_WORD = "V"
		change_color(V_NODE)
	elseif action_id == HASH_TOUCH and action.pressed and gui.pick_node(B_NODE, action.x, action.y) or action_id == hash("B") and action.pressed then
		TOUCH_WORD = "B"
		change_color(B_NODE)
	elseif action_id == HASH_TOUCH and action.pressed and gui.pick_node(N_NODE, action.x, action.y) or action_id == hash("N") and action.pressed then
		TOUCH_WORD = "N"
		change_color(N_NODE)
	elseif action_id == HASH_TOUCH and action.pressed and gui.pick_node(M_NODE, action.x, action.y) or action_id == hash("M") and action.pressed then
		TOUCH_WORD = "M"
		change_color(M_NODE)
	end
end
